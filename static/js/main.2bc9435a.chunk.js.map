{"version":3,"sources":["hooks/useAxiosQuery.js","components/LoginPage.js","components/GameComponents/SquareButton.js","components/GameComponents/GameUtils/UtilFunctions.js","components/GameComponents/SquaresBoard.js","components/GamePage.js","components/ProtectedPage.js","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","usePostQuery","key","id","url","body","config","useQuery","a","axios","post","headers","authorization","sessionStorage","getItem","Accept","data","status","console","log","layout","labelCol","span","wrapperCol","tailLayout","offset","LoginPage","history","useHistory","useState","email","setEmail","enabled","error","refetch","useEffect","success","token","setItem","push","className","name","onFinish","values","Item","label","rules","type","message","required","size","htmlType","style","background","border","SquareButton","value","hover","onClick","onMouseOver","onMouseOut","width","height","winningSquareCombos","isBoardFull","squares","i","length","calculateWinner","b","c","twoDArraytoOneD","twoDArray","concat","apply","square","number","numberOfSquares","squareArray","matrixSquare","splice","constructSquare","SquaresBoard","Array","fill","squaresValue","setSquaresValue","engineBody","setEngineBody","highlight","setHighLight","suggestedMove","setSuggestedMove","modalVisible","setModalVisible","setStatus","board","isLoading","includes","aiData","oneDEngDataArr","winLoseOrDraw","displaySquare","index","fillNullValuesWithEmptyString","filledArr","iterator","forEach","convertToTwoD","handleClick","arr","rowX","colY","item","x","rowItem","y","color","textAlign","fontStyle","fontSize","title","visible","cancelButtonProps","display","onOk","onCancel","map","float","marginTop","marginRight","marginLeft","window","location","reload","disabled","suggMove","matchedIndex","filterEmpty","filter","suggestMoves","Header","Layout","Content","GamePage","minHeight","icon","LogoutOutlined","ProtectedPage","Component","component","rest","render","props","to","pathname","state","from","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","staleTime","retry","mutations","App","QueryClientProvider","client","initialIsOpen","forceRefresh","path","exact","removeItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2bc9435a.chunk.js","sourcesContent":["import { useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://d9u7x85vp9.execute-api.us-east-2.amazonaws.com/production\";\r\n\r\n/**\r\n *\r\n * @param {string} key - Query Key\r\n * @param {string} id - id of the query\r\n * @param {string} url - url to be fetched\r\n * @param {JSON} body - content of request body\r\n * @param {JSON} config - query config fo that particular query\r\n */\r\n\r\nexport const usePostQuery = (key, id, url, body, config = {}) => {\r\n  return useQuery(\r\n    [key, id],\r\n    async () => {\r\n      var { data, status } = await axios.post(BASE_URL + url, body, {\r\n        headers: {\r\n          authorization: sessionStorage.getItem(\"token\"),\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      console.log(`POST ${url} : ${data} `);\r\n      console.log(`AXIOS Status : ${url} : ${status}`);\r\n      return data;\r\n    },\r\n    config\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport \"../styles/LoginPage.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { usePostQuery } from \"../hooks/useAxiosQuery\";\r\n\r\n/** Displays the login screen of the app */\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\nconst LoginPage = () => {\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState(\"\");\r\n  const { data, error, refetch } = usePostQuery(\r\n    \"auth\",\r\n    \"auth\",\r\n    \"/auth\",\r\n    { email: email },\r\n    { enabled: false }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data && data.success === true && data.token) {\r\n        setEmail(email);\r\n        sessionStorage.setItem(\"email\", email);\r\n        sessionStorage.setItem(\"token\", \"Bearer \" + data.token);\r\n        history.push(\"/game-page\");\r\n      }\r\n    }\r\n  }, [data, history, email]);\r\n\r\n  if (error) console.log(error);\r\n\r\n  const onFinish = (values) => {\r\n    console.log(\"Login Form values : \", values);\r\n    setEmail(values.email);\r\n    refetch();\r\n  };\r\n\r\n  return (\r\n    <div className=\"center-content\">\r\n      <h2> Please Enter your email to Login! </h2>\r\n      <Form {...layout} name=\"login\" onFinish={onFinish}>\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"E-mail\"\r\n          rules={[\r\n            {\r\n              type: \"email\",\r\n              message: \"The input is not valid E-mail!\",\r\n            },\r\n            {\r\n              required: true,\r\n              message: \"Please input your E-mail!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input size=\"large\" />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            style={{ background: \"#2eaf7d\", border: \"1px solid #2eaf7d\" }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst SquareButton = ({ value, hover, onClick, onMouseOver, onMouseOut }) => {\r\n  const style =\r\n    hover === 1\r\n      ? { width: \"75px\", height: \"75px\", border: \"2px solid #fff\", background: \"#02353c\" }\r\n      : { width: \"75px\", height: \"75px\", border: \"2px solid #fff\", background: \"#2eaf7d\" };\r\n  return (\r\n    <Button\r\n      type=\"primary\"\r\n      size={\"large\"}\r\n      style={style}\r\n      id={value}\r\n      onMouseOver={onMouseOver}\r\n      onMouseOut={onMouseOut}\r\n      onClick={onClick}\r\n    >\r\n      {value ? value : \" \"}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SquareButton;\r\n","/**\r\n * Construct the matrix\r\n * @param {integer} number - the matrix size\r\n */\r\nexport const constructSquare = (number) => {\r\n  const numberOfSquares = number * number;\r\n  let squareArray = [];\r\n  for (let i = 0; i < numberOfSquares; i++) {\r\n    squareArray[i] = i;\r\n  }\r\n  const matrixSquare = [];\r\n  while (squareArray.length) matrixSquare.push(squareArray.splice(0, number));\r\n  console.log(matrixSquare);\r\n  return matrixSquare;\r\n};\r\n\r\n/** Winning combination of squares */\r\nconst winningSquareCombos = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\n/**\r\n * To check if all the squares are filled\r\n * @param {Array} squares - the squares in the board\r\n */\r\nexport const isBoardFull = (squares) => {\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === \"\") {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * To check if all the squares are filled\r\n * @param {Array} squares - the squares in the board\r\n */\r\nexport const calculateWinner = (squares) => {\r\n  for (let i = 0; i < winningSquareCombos.length; i++) {\r\n    const [a, b, c] = winningSquareCombos[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * To check if all the squares are filled\r\n * @param {Array} squares - the squares in the board\r\n */\r\nexport const suggestMoves = (squares) => {\r\n  const filterEmpty = squares.filter((square) => square !== \"X\" && square !== \"O\");\r\n  if (filterEmpty && filterEmpty.length === 1) {\r\n    let matchedIndex;\r\n    squares.forEach((item, index) => {\r\n      if (item === \"\") matchedIndex = index;\r\n    });\r\n    return matchedIndex;\r\n  }\r\n  for (let i = 0; i < winningSquareCombos.length; i++) {\r\n    const [a, b, c] = winningSquareCombos[i];\r\n    if (\r\n      (squares[a] === \"O\" && squares[b] === \"O\") ||\r\n      (squares[b] === \"O\" && squares[c] === \"O\") ||\r\n      (squares[a] === \"O\" && squares[c] === \"O\")\r\n    ) {\r\n      const suggestedMove = winningSquareCombos[i].filter((item) => {\r\n        return squares[item] !== \"O\";\r\n      });\r\n      if (squares[suggestedMove] !== \"X\") return suggestedMove;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Spread a 2D array into 1D array\r\n * @param {Array} twoDArray\r\n */\r\nexport const twoDArraytoOneD = (twoDArray) => {\r\n  return [].concat.apply([], twoDArray);\r\n};\r\n","import { Button, Col, Row, Spin, Modal } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport SquareButton from \"./SquareButton\";\r\nimport {\r\n  isBoardFull,\r\n  calculateWinner,\r\n  twoDArraytoOneD,\r\n  constructSquare,\r\n  suggestMoves,\r\n} from \"./GameUtils/UtilFunctions\";\r\nimport { usePostQuery } from \"../../hooks/useAxiosQuery\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Displays the matrix\r\nconst square = constructSquare(3);\r\n\r\n/**\r\n * Component to display the board\r\n */\r\nconst SquaresBoard = () => {\r\n  const history = useHistory();\r\n  console.log(history);\r\n  // state to store value of the squares\r\n  const [squaresValue, setSquaresValue] = useState(Array(9).fill(null));\r\n  // state to store data for request body\r\n  const [engineBody, setEngineBody] = useState([]);\r\n  // store state to highlight rows and columns\r\n  const [highlight, setHighLight] = useState([]);\r\n  // store suggested move\r\n  const [suggestedMove, setSuggestedMove] = useState(null);\r\n  // to show / hide modal for Suggested move\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  // win/lose/draw status\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const { data, error, isLoading, refetch } = usePostQuery(\r\n    \"game\",\r\n    \"game\",\r\n    \"/engine\",\r\n    { board: engineBody },\r\n    { enabled: false }\r\n  );\r\n\r\n  // if sessionStorage doesnt have the token or if the AI responds with 401 or 403, logout\r\n  if (\r\n    !sessionStorage.getItem(\"token\") ||\r\n    (error && error.message && (error.message.includes(\"401\") || error.message.includes(\"403\")))\r\n  ) {\r\n    history.push(\"/logout\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      console.log(\"Data from the game ai engine \", data);\r\n      const aiData = data.board;\r\n      const oneDEngDataArr = twoDArraytoOneD(aiData);\r\n      const winLoseOrDraw = calculateWinner(oneDEngDataArr) || isBoardFull(oneDEngDataArr);\r\n      setStatus(\r\n        winLoseOrDraw === true\r\n          ? \"The Game is a draw\"\r\n          : winLoseOrDraw\r\n          ? winLoseOrDraw === \"X\"\r\n            ? \"You win\"\r\n            : \"AI win\"\r\n          : \"\"\r\n      );\r\n      if (!isBoardFull(oneDEngDataArr)) setSquaresValue(oneDEngDataArr);\r\n    }\r\n  }, [data]);\r\n\r\n  // when the player selects a vacant square and the state changes, request is sent to ai to fetch the next move\r\n  useEffect(() => {\r\n    if (engineBody && engineBody.length > 0) refetch();\r\n  }, [engineBody, refetch]);\r\n\r\n  // for logging\r\n  useEffect(() => {\r\n    console.log(\"State changes of squares \", squaresValue, highlight);\r\n  }, [squaresValue, highlight]);\r\n\r\n  // handle click on the squares\r\n  const handleClick = (index) => {\r\n    console.log(\"Clicked Button \", index);\r\n    const squares = [...squaresValue];\r\n    // value (X/O) already present in the clicked square or a winner is decided diable the squares\r\n    if (squares[index] || calculateWinner(squaresValue)) return;\r\n    squares[index] = \"X\";\r\n    const fillNullValuesWithEmptyString = squares;\r\n    let [filledArr, iterator] = [[], 0];\r\n    fillNullValuesWithEmptyString.forEach((value) => {\r\n      value = value === null ? \"\" : value;\r\n      filledArr[iterator++] = value;\r\n      return value;\r\n    });\r\n    const convertToTwoD = [];\r\n    while (filledArr.length) convertToTwoD.push(filledArr.splice(0, 3));\r\n    console.log(\"Filled values\", fillNullValuesWithEmptyString, convertToTwoD);\r\n    // Because AI needs a 2d array\r\n    setEngineBody(convertToTwoD);\r\n    setSquaresValue(squares);\r\n    //refetch();\r\n  };\r\n\r\n  /** OnMouse out after highlighting the rows and columns */\r\n  const onMouseOut = (index) => {\r\n    let arr = Array(9).fill(0);\r\n    setHighLight(arr);\r\n  };\r\n\r\n  /** To highlight rows and columns */\r\n  const onMouseOver = (index) => {\r\n    let arr = Array(9).fill(0);\r\n    arr[index] = 1;\r\n    const twoDArray = [];\r\n    while (arr.length) twoDArray.push(arr.splice(0, 3));\r\n    console.log(twoDArray);\r\n    let [rowX, colY] = [0, 0];\r\n    //find the x, y position of the hovered square\r\n    twoDArray.forEach((item, x) => {\r\n      const row = item;\r\n      row.forEach((rowItem, y) => {\r\n        if (rowItem === 1) {\r\n          rowX = x;\r\n          colY = y;\r\n        }\r\n      });\r\n    });\r\n    // find the row and column of the hovered square\r\n    for (let i = 0; i < 3; i++) {\r\n      twoDArray[rowX][i] = 1;\r\n      twoDArray[i][colY] = 1;\r\n    }\r\n    console.log(rowX, colY, twoDArray);\r\n    setHighLight(twoDArraytoOneD(twoDArray));\r\n  };\r\n\r\n  /**\r\n   * Display the square on the board\r\n   * @param {number} index\r\n   */\r\n  const displaySquare = (index) => {\r\n    return (\r\n      <SquareButton\r\n        value={squaresValue[index]}\r\n        hover={highlight[index]}\r\n        onClick={() => handleClick(index)}\r\n        onMouseOver={() => onMouseOver(index)}\r\n        onMouseOut={() => onMouseOut(index)}\r\n      />\r\n    );\r\n  };\r\n\r\n  // refreshes the page, could be done with resetting the state\r\n  const resetGame = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <div className=\"center-content\">\r\n      {error ? (\r\n        <div>ERROR!</div>\r\n      ) : isLoading ? (\r\n        <div>\r\n          <Spin />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div\r\n            style={{ color: \"#001818\", textAlign: \"center\", fontStyle: \"bold\", fontSize: \"20px\" }}\r\n          >\r\n            {status ? status : \"\"}\r\n          </div>\r\n          <div>\r\n            <Modal\r\n              title=\"Suggested Move\"\r\n              visible={modalVisible}\r\n              cancelButtonProps={{ style: { display: \"none\" } }}\r\n              onOk={() => {\r\n                setModalVisible(false);\r\n              }}\r\n              onCancel={() => {\r\n                setModalVisible(false);\r\n              }}\r\n            >\r\n              {suggestedMove ? (\r\n                <div>Place X in position {suggestedMove} </div>\r\n              ) : (\r\n                <div>No Moves to suggest</div>\r\n              )}\r\n            </Modal>\r\n          </div>\r\n          {square.map((x, index) => {\r\n            return (\r\n              <Row key={index}>\r\n                {x.map((y) => {\r\n                  return <Col key={y}>{displaySquare(y)}</Col>;\r\n                })}\r\n              </Row>\r\n            );\r\n          })}\r\n          <div style={{ float: \"center\", marginTop: \"5px\" }}>\r\n            <Button\r\n              type=\"primary\"\r\n              style={{\r\n                marginRight: \"5px\",\r\n                marginLeft: \"-3px\",\r\n                background: \"#FFF\",\r\n                color: \"#02353c\",\r\n                border: \"1px solid #2eaf7d\",\r\n              }}\r\n              onClick={resetGame}\r\n            >\r\n              Reset Game\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={status}\r\n              style={{ background: \"#FFF\", color: \"#02353c\", border: \"1px solid #2eaf7d\" }}\r\n              onClick={() => {\r\n                if (status) return;\r\n                const suggMove = suggestMoves(squaresValue);\r\n                setSuggestedMove(suggMove);\r\n                setModalVisible(true);\r\n                console.log(\"suggested move \", suggestedMove);\r\n              }}\r\n            >\r\n              Suggest Move\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SquaresBoard;\r\n","import React from \"react\";\r\nimport { Layout, Button } from \"antd\";\r\nimport { LogoutOutlined } from \"@ant-design/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SquaresBoard from \"./GameComponents/SquaresBoard\";\r\n\r\n/** Display the layout for the game page */\r\nconst { Header, Content } = Layout;\r\nconst GamePage = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div style={{ color: \"#008080\" }}>\r\n      <Layout style={{ minHeight: \"100vh\" }}>\r\n        <Header>\r\n          <div style={{ float: \"right\" }}>\r\n            <Button\r\n              type=\"primary\"\r\n              style={{ background: \"#2eaf7d\", border: \"1px solid #2eaf7d\" }}\r\n              icon={<LogoutOutlined />}\r\n              onClick={() => {\r\n                console.log(\"Logout Button Pushed\");\r\n                history.push(\"/logout\");\r\n              }}\r\n            />\r\n          </div>\r\n        </Header>\r\n        <Content>\r\n          <SquaresBoard />\r\n        </Content>\r\n      </Layout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nconst ProtectedPage = ({ component: Component, ...rest }) => {\r\n  console.log(\"Authenticated Page \", sessionStorage.getItem(\"token\"));\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        sessionStorage.getItem(\"token\") ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedPage;\r\n","import \"./App.css\";\nimport LoginPage from \"./components/LoginPage\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport GamePage from \"./components/GamePage\";\nimport ProtectedPage from \"./components/ProtectedPage\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // query options\n      refetchOnWindowFocus: false,\n      staleTime: 0,\n      retry: false,\n    },\n    mutations: {\n      // mutation options\n    },\n  },\n});\nfunction App() {\n  return (\n    <div className=\"app-content\">\n      <QueryClientProvider client={queryClient}>\n        <ReactQueryDevtools initialIsOpen={false} />\n        <BrowserRouter forceRefresh={true}>\n          <Switch>\n            <Route path=\"/\" component={LoginPage} exact />\n            <ProtectedPage path=\"/game-page\" component={GamePage} exact />\n            <Route\n              path=\"/logout\"\n              render={(props) => {\n                sessionStorage.removeItem(\"token\");\n                sessionStorage.removeItem(\"email\");\n                return <Redirect to=\"/\" />;\n              }}\n              exact\n            />\n          </Switch>\n        </BrowserRouter>\n      </QueryClientProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}